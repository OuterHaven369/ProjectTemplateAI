"""
This Python script, leveraging argparse, os, yaml, openai, and dotenv libraries, defines a TemplateGenerator class to automate the creation of project structures and file templates based on a YAML configuration. Here's an overview of its components:

1. Imports: Utilizes essential libraries for argument parsing, file and directory operations, YAML file processing, OpenAI API interactions, and environment variable management.

2. TemplateGenerator Class:
   - Initializes with the path to a YAML configuration file and an option to use OpenAI for generating file content.
   - Loads environment variables, specifically the OpenAI API key, from a .env file for secure API access.
   - Selects an OpenAI model for content generation, with a placeholder for model selection logic.
   - Parses the YAML configuration to create the specified directory structure and files. It supports creating nested directories and files with custom or AI-generated content.
   - Features methods for directory and file creation, with conditional logic to fill files using custom templates or dynamically generated content via OpenAI's API based on the presence of an API key and user preference.

3. Main Function:
   - Parses command-line arguments to accept a YAML configuration path and an optional flag to enable OpenAI content generation.
   - Instantiates the TemplateGenerator with the provided arguments and invokes the method to generate the project structure and file content.

4. Usage:
   - Designed to be executed from the command line, it allows users to quickly scaffold a project structure, including directories and files, with the option to populate files with starter content generated by OpenAI's GPT model or custom templates.

This script is ideal for developers looking to streamline the initial setup of new projects, offering flexibility in structure definition through YAML and innovative file content generation using OpenAI's powerful AI models.
"""


import argparse
import os
import yaml
import openai
from dotenv import load_dotenv

class TemplateGenerator:
    def __init__(self, yaml_path, use_openai=False):
        self.yaml_path = yaml_path
        self.use_openai = use_openai
        self.load_env_vars()

    def load_env_vars(self):
        load_dotenv()
        self.openai_api_key = os.getenv("OPENAI_API_KEY")

    def select_model(self):
        # Simplified model selection for conceptual purposes
        return "text-davinci-002"

    def generate_from_yaml(self):
        with open(self.yaml_path, 'r') as yaml_file:
            structure = yaml.safe_load(yaml_file)
        self.create_directory_structure(structure, os.getcwd())

    def create_directory_structure(self, structure, current_path=""):
        for item, value in structure.items():
            item_path = os.path.join(current_path, item)
            if isinstance(value, dict):
                os.makedirs(item_path, exist_ok=True)
                self.create_directory_structure(value, item_path)
            elif isinstance(value, list):
                for file_name in value:
                    self.create_file(item_path, file_name)

    def create_file(self, directory, file_name, use_custom_template=False):
        file_path = os.path.join(directory, file_name)
        os.makedirs(directory, exist_ok=True)
        if use_custom_template:
            content = self.generate_custom_template(file_name)
        elif self.use_openai and self.openai_api_key:
            content = self.generate_file_content(file_name)
        else:
            content = "# This file was auto-generated by ProjectTemplateAI"
        with open(file_path, 'w') as file:
            file.write(content)


    def generate_file_content(self, file_name):
        model = self.select_model()
        prompt = f"Generate a brief content template for a file named {file_name}"
        response = openai.Completion.create(
            engine=model,
            prompt=prompt,
            max_tokens=150,
            api_key=self.openai_api_key
        )
        return response.choices[0].text.strip()
    
    def generate_custom_template(self, file_name, custom_template):
        file_path = os.path.join(os.getcwd(), file_name)
        with open(file_path, 'w') as file:
            file.write(custom_template)


def main():
    parser = argparse.ArgumentParser(description='Generate project structure and file templates.')
    parser.add_argument('yaml_path', type=str, help='Path to the YAML file defining the project structure.')
    parser.add_argument('--use_openai', action='store_true', help='Use OpenAI to generate file content templates.')
    
    args = parser.parse_args()

    generator = TemplateGenerator(args.yaml_path, args.use_openai)
    generator.generate_from_yaml()

    print("Project structure and files have been successfully generated.")

if __name__ == "__main__":
    main()
